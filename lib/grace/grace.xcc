<?xml version="1.0"?>
<parser ns="#GRACE_NS_URI" prefix="xgr">
    <!-- Preamble -->
    <preamble><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "grace/graceP.h"

typedef struct {
    Grace *grace;
    GProject *gp;
    int ncol;
    int nrow;
    Quark *ss;
} ParserData;

typedef struct _Page {
    int width;
    int height;
    int bgfill;
    int bgcolor;
} Page;

Page *page_new(void)
{
    Page *retval;
    
    retval = xmalloc(sizeof(Page));
    if (retval) {
        memset(retval, 0, sizeof(Page));
        retval->bgfill = TRUE;
    }
    
    return retval;
}

Colordef *colordef_new(void)
{
    Colordef *retval;
    retval = xmalloc(sizeof(Colordef));
    retval->id = -1;
    retval->cname = NULL;
    return retval;
}

void colordef_free(Colordef *cd)
{
    if (cd) {
        xfree(cd->cname);
        xfree(cd);
    }
}

Fontdef *fontdef_new()
{
    Fontdef *retval;
    retval = xmalloc(sizeof(Fontdef));
    retval->id = -1;
    retval->fontname = NULL;
    retval->fallback = NULL;
    return retval;
}

void fontdef_free(Fontdef *fd)
{
    if (fd) {
        xfree(fd->fontname);
        xfree(fd->fallback);
        xfree(fd);
    }
}

typedef struct {
    int font;
    int color;
    double size;
} FaceSpec;

FaceSpec *facespec_new()
{
    FaceSpec *fs;
    fs = xmalloc(sizeof(FaceSpec));
    if (fs) {
        memset(fs, 0, sizeof(FaceSpec));
    }
    return fs;
}

void facespec_free(FaceSpec *fs)
{
    if (fs) {
        xfree(fs);
    }
}

typedef struct {
    GraphType type;
    int stacked;
    double bargap;
} PresentationSpec;


PresentationSpec *presentationspec_new()
{
    PresentationSpec *ps;
    ps = xmalloc(sizeof(PresentationSpec));
    if (ps) {
        memset(ps, 0, sizeof(PresentationSpec));
    }
    return ps;
}

void presentationspec_free(PresentationSpec *ps)
{
    if (ps) {
        xfree(ps);
    }
}

view *view_new()
{
    view *v;
    v = xmalloc(sizeof(view));
    if (v) {
        memset(v, 0, sizeof(view));
    }
    return v;
}

typedef struct {
    int type;
    double min;
    double max;
    int invert;
} Scale;

Scale *scale_new()
{
    Scale *s;
    s = xmalloc(sizeof(Scale));
    if (s) {
        memset(s, 0, sizeof(Scale));
    }
    return s;
}

typedef struct {
    int type;
    APoint ap;
} Location;

Location *location_new()
{
    Location *retval;
    retval = xmalloc(sizeof(Location));
    if (retval) {
        memset(retval, 0, sizeof(Location));
    }
    return retval;
}

typedef struct {
    FPoint anchor;
    int just;
    VPoint offset;
    Line line;
    Pen fillpen;
} Legframe;

Legframe *legframe_new()
{
    Legframe *lf;
    lf = xmalloc(sizeof(Legframe));
    if (lf) {
        memset(lf, 0, sizeof(Legframe));
    }
    return lf;
}

typedef struct {
    int active;
    double x;
    double y;
} Fixedpoint;

Fixedpoint *fixedpoint_new()
{
    Fixedpoint *fp;
    fp = xmalloc(sizeof(Fixedpoint));
    if (fp) {
        memset(fp, 0, sizeof(Fixedpoint));
    }
    return fp;
}

GLocator *glocator_new()
{
    GLocator *retval;
    retval = xmalloc(sizeof(GLocator));
    if (retval) {
        memset(retval, 0, sizeof(GLocator));
    }
    return retval;
}

void glocator_free(GLocator *gl)
{
    if (gl) {
        xfree(gl->fx.fstring);
        xfree(gl->fy.fstring);
        xfree(gl);
    }
}

TextProps *textprops_new(void)
{
    TextProps *retval;
    retval = xmalloc(sizeof(TextProps));
    if (retval) {
        memset(retval, 0, sizeof(TextProps));
    }
    return retval;
}

typedef struct {
    Line line;
} ABar;

ABar *axisbar_new()
{
    ABar *retval;
    retval = xmalloc(sizeof(ABar));
    if (retval) {
        memset(retval, 0, sizeof(ABar));
    }
    return retval;
}

typedef struct {
    int active;
    int sideplacement;
    char *transform;
    char *prepend;
    char *append;
    VPoint offset;
    
    TextProps tprops;
    
    int skip;
    int stagger;
    int autostart;
    double start;
    int autostop;
    double stop;
    Format format;
} TLabels;

TLabels *tlabels_new()
{
    TLabels *retval;
    retval = xmalloc(sizeof(TLabels));
    if (retval) {
        memset(retval, 0, sizeof(TLabels));
    }
    return retval;
}

void tlabels_free(TLabels *tl)
{
    if (tl) {
        xfree(tl->transform);
        xfree(tl->prepend);
        xfree(tl->append);
        xfree(tl->format.fstring);
        xfree(tl);
    }
}

typedef struct {
    int type;                   /* type of user ticks */
    int nticks;                 /* total number of ticks */
    tickloc tloc[MAX_TICKS];    /* locations of ticks */
} UTicks;

UTicks *uticks_new()
{
    UTicks *retval;
    retval = xmalloc(sizeof(UTicks));
    if (retval) {
        memset(retval, 0, sizeof(UTicks));
    }
    return retval;
}

tickloc *tick_new()
{
    tickloc *retval;
    retval = xmalloc(sizeof(tickloc));
    if (retval) {
        memset(retval, 0, sizeof(tickloc));
    }
    return retval;
}

int utick_add(UTicks *uticks, tickloc *tick)
{
    if (uticks && uticks->nticks < MAX_TICKS) {
        uticks->tloc[uticks->nticks++] = *tick;
        return RETURN_SUCCESS;
    } else {
        return RETURN_FAILURE;
    }
}

tickprops *tickprops_new()
{
    tickprops *retval;
    retval = xmalloc(sizeof(tickprops));
    if (retval) {
        memset(retval, 0, sizeof(tickprops));
    }
    return retval;
}

gridprops *gridprops_new()
{
    gridprops *retval;
    retval = xmalloc(sizeof(gridprops));
    if (retval) {
        memset(retval, 0, sizeof(gridprops));
    }
    return retval;
}

typedef struct {
    int autov;
    double value;
} Autoval;

Arrow *arrow_new(void)
{
    Arrow *retval;
    retval = xmalloc(sizeof(Arrow));
    if (retval) {
        memset(retval, 0, sizeof(Arrow));
    }
    return retval;
}

TextFrame *textframe_new(void)
{
    TextFrame *retval;
    retval = xmalloc(sizeof(TextFrame));
    if (retval) {
        memset(retval, 0, sizeof(TextFrame));
    }
    return retval;
}

typedef struct {
    int active;
    Arrow arrow;
} TextPointer;

TextPointer *textpointer_new(void)
{
    TextPointer *retval;
    retval = xmalloc(sizeof(TextPointer));
    if (retval) {
        memset(retval, 0, sizeof(TextPointer));
    }
    return retval;
}

AValue *avalue_new(void)
{
    AValue *retval;
    retval = xmalloc(sizeof(AValue));
    if (retval) {
        memset(retval, 0, sizeof(AValue));
    }
    return retval;
}

void avalue_free(AValue *av)
{
    if (av) {
        xfree(av->prestr);
        xfree(av->appstr);
        xfree(av->format.fstring);
        xfree(av);
    }
}


static Symbol *symbol_new(void)
{
    Symbol *retval;
    retval = xmalloc(sizeof(Symbol));
    if (retval) {
        memset(retval, 0, sizeof(Symbol));
    }
    return retval;
}

static SetLine *setline_new(void)
{
    SetLine *retval;
    retval = xmalloc(sizeof(SetLine));
    if (retval) {
        memset(retval, 0, sizeof(SetLine));
    }
    return retval;
}

static BarLine *barline_new(void)
{
    BarLine *retval;
    retval = xmalloc(sizeof(BarLine));
    if (retval) {
        memset(retval, 0, sizeof(BarLine));
    }
    return retval;
}

static RiserLine *riserline_new(void)
{
    RiserLine *retval;
    retval = xmalloc(sizeof(RiserLine));
    if (retval) {
        memset(retval, 0, sizeof(RiserLine));
    }
    return retval;
}

char *utf2iso(const char *s)
{
    char *retval;
    char *p1, *p2;
    
    if (!s) {
        return NULL;
    }
    
    retval = xmalloc(strlen(s) + 1);
    if (!retval) {
        return NULL;
    }
    
    p1 = (char *) s;
    p2 = retval;
    
    while (*p1) {
        if (*p1 & 0x80) {
            /* last 2 bits */
            *p2 = (*p1 & 0x03) << 6; p1++;
            /* last 6 bits of the next byte */
            *p2 += *p1 & 0x3F;
        } else {
            *p2 = *p1;
        }
        p1++; p2++;
    }
    
    *(p2) = '\0';
    
    return retval;
}

    ]]></preamble>

    <!-- Attribute types -->
    <attribute-type name="ival" ctype="int">
        $$ = atoi($?);
    </attribute-type>
    <attribute-type name="dval" ctype="double">
        $$ = atof($?);
    </attribute-type>
    <attribute-type name="sval" ctype="char *">
        $$ = utf2iso($?);
    </attribute-type>
    <attribute-type name="bval" ctype="int">
        $$ = strings_are_equal($?, "yes");
    </attribute-type>
    <attribute-type name="rgb" ctype="RGB *"><![CDATA[
        unsigned int r, g, b;
        $$ = xmalloc(sizeof(RGB));
        sscanf($?, "#%02x%02x%02x", &r, &g, &b);
        $$->red = r; $$->green = g; $$->blue = b;
    ]]></attribute-type>
    <attribute-type name="ftype" ctype="FormatType"><![CDATA[
        Grace *grace = ((ParserData *)$U)->grace;
        $$ = get_format_type_by_name(grace, $?);
    ]]></attribute-type>
    <attribute-type name="fontid" ctype="int">
        $$ = atoi($?);
    </attribute-type>
    <attribute-type name="offset" ctype="VVector *"><![CDATA[
        $$ = xmalloc(sizeof(VVector));
        if (sscanf($?, "(%lg, %lg)", &($$->x), &($$->y)) != 2) {
            $$->x = $$->y = 0.0;
        }
    ]]></attribute-type>
    <attribute-type name="fpoint" ctype="FPoint *"><![CDATA[
        $$ = xmalloc(sizeof(FPoint));
        sscanf($?, "(%lg, %lg)", &($$->x), &($$->y));
    ]]></attribute-type>
    <attribute-type name="axislayout" ctype="int">
        if (!strcmp($?, VStrParallel)) {
            $$ = LAYOUT_PARALLEL;
        } else {
            $$ = LAYOUT_PERPENDICULAR;
        }
    </attribute-type>
    <attribute-type name="inoutplacement" ctype="int">
        if (!strcmp($?, VStrIn)) {
            $$ = TICKS_IN;
        } else
        if (!strcmp($?, VStrOut)) {
            $$ = TICKS_OUT;
        } else
        if (!strcmp($?, VStrBoth)) {
            $$ = TICKS_BOTH;
        } else {
            $$ = TICKS_IN;
            errmsg("Wrong inoutplacement");
        }
    </attribute-type>
    <attribute-type name="uticktype" ctype="int">
        if (!strcmp($?, VStrNone)) {
            $$ = TICKS_SPEC_NONE;
        } else
        if (!strcmp($?, VStrTicks)) {
            $$ = TICKS_SPEC_MARKS;
        } else
        if (!strcmp($?, VStrBoth)) {
            $$ = TICKS_SPEC_BOTH;
        } else {
            $$ = TICKS_SPEC_BOTH;
            errmsg("Wrong uticktype");
        }
    </attribute-type>
    <attribute-type name="ticktype" ctype="int">
        if (!strcmp($?, VStrMajor)) {
            $$ = TICK_TYPE_MAJOR;
        } else
        if (!strcmp($?, VStrMinor)) {
            $$ = TICK_TYPE_MINOR;
        } else {
            $$ = TICK_TYPE_MINOR;
            errmsg("Wrong ticktype");
        }
    </attribute-type>
    <attribute-type name="loctype" ctype="int">
        if (!strcmp($?, VStrWorld)) {
            $$ = COORD_WORLD;
        } else {
            $$ = COORD_VIEW;
        }
    </attribute-type>
    <attribute-type name="settype" ctype="SetType"><![CDATA[
        Grace *grace = ((ParserData *)$U)->grace;
        $$ = get_settype_by_name(grace, $?);
    ]]></attribute-type>
    <attribute-type name="fillrule" ctype="int">
        if (!strcmp($?, VStrWinding)) {
            $$ = FILLRULE_WINDING;
        } else {
            $$ = FILLRULE_EVENODD;
        }
    </attribute-type>
    <attribute-type name="regiontype" ctype="int"><![CDATA[
        Grace *grace = ((ParserData *)$U)->grace;
        $$ = get_regiontype_by_name(grace, $?);
    ]]></attribute-type>
    <attribute-type name="dateordval" ctype="double"><![CDATA[
        if (parse_date_or_number($0, $?, FALSE, FMT_iso, &$$) != RETURN_SUCCESS) {
            $$ = 0.0;
        }
    ]]></attribute-type>
    <attribute-type name="autodateordval" ctype="Autoval *"><![CDATA[
        $$ = xmalloc(sizeof(Autoval));
        if (!strcmp($?, VStrAuto)) {
            $$->autov = TRUE;
            $$->value = 0.0;
        } else {
            $$->autov = FALSE;
            if (parse_date_or_number($0, $?, FALSE, FMT_iso, &$$->value) != RETURN_SUCCESS) {
                $$->value = 0.0;
            }
        }
    ]]></attribute-type>
    
    <!-- Element types -->
    <element-type name="project" ctype="Quark *"><![CDATA[
        {
        ParserData *udata = (ParserData *) $U;
        $$ = udata->gp->q;
        }
    ]]></element-type>
    <element-type name="page" ctype="Page *">
        $$ = page_new();
    </element-type>
    <element-type name="string" ctype="char **">
        $$ = xmalloc(sizeof(char *));
    </element-type>
    <element-type name="pen" ctype="Pen *"><![CDATA[
        $$ = xmalloc(sizeof(Pen));
        $$->color = $$->pattern = 1;
    ]]></element-type>
    <element-type name="line" ctype="Line *"><![CDATA[
        $$ = xmalloc(sizeof(Line));
        $$->pen.color = $$->pen.pattern = 1;
        $$->width = 1.0;
        $$->style = 1;
    ]]></element-type>
    <element-type name="dummy" ctype="void *">
        $$ = NULL;
    </element-type>
    <element-type name="colordef" ctype="Colordef *">
        $$ = colordef_new();
    </element-type>
    <element-type name="fontdef" ctype="Fontdef *">
        $$ = fontdef_new();
    </element-type>
    <element-type name="facespec" ctype="FaceSpec *">
        $$ = facespec_new();
    </element-type>
    <element-type name="ssd" ctype="Quark *"><![CDATA[
        $$ = ssd_new($P);
        ((ParserData *) $U)->ss = $$;
        ((ParserData *) $U)->ncol = -1;
    ]]></element-type>
    <element-type name="graph" ctype="Quark *">
        $$ = graph_new($P);
    </element-type>
    <element-type name="presentationspec" ctype="PresentationSpec *">
        $$ = presentationspec_new();
    </element-type>
    <element-type name="view" ctype="view *">
        $$ = view_new();
    </element-type>
    <element-type name="scale" ctype="Scale *">
        $$ = scale_new();
    </element-type>
    <element-type name="dptr" ctype="double *">
        $$ = xcalloc(1, SIZEOF_DOUBLE);
    </element-type>
    <element-type name="legend" ctype="legend *">
        $$ = frame_get_legend($P);
    </element-type>
    <element-type name="legframe" ctype="Legframe *">
        $$ = legframe_new();
    </element-type>
    <element-type name="glocator" ctype="GLocator *">
        $$ = glocator_new();
    </element-type>
    <element-type name="fixedpoint" ctype="Fixedpoint *">
        $$ = fixedpoint_new();
    </element-type>
    <element-type name="format" ctype="Format *">
        $$ = format_new();
    </element-type>
    <element-type name="frame" ctype="Quark *">
        $$ = frame_new($P);
    </element-type>
    <element-type name="textprops" ctype="TextProps *">
        $$ = textprops_new();
    </element-type>
    <element-type name="axisgrid" ctype="Quark *">
        $$ = axisgrid_new($P);
    </element-type>
    <element-type name="axis" ctype="Quark *">
        $$ = axis_new($P);
    </element-type>
    <element-type name="axisbar" ctype="ABar *">
        $$ = axisbar_new();
    </element-type>
    <element-type name="gridprops" ctype="gridprops *">
        $$ = gridprops_new();
    </element-type>
    <element-type name="tickprops" ctype="tickprops *">
        $$ = tickprops_new();
    </element-type>
    <element-type name="tlabels" ctype="TLabels *">
        $$ = tlabels_new();
    </element-type>
    <element-type name="uticks" ctype="UTicks *">
        $$ = uticks_new();
    </element-type>
    <element-type name="tick" ctype="tickloc *">
        $$ = tick_new();
    </element-type>
    <element-type name="object" ctype="Quark *">
        $$ = object_new($P);
    </element-type>
    <element-type name="atext" ctype="Quark *">
        $$ = atext_new($P);
    </element-type>
    <element-type name="location" ctype="Location *">
        $$ = location_new();
    </element-type>
    <element-type name="do_line_data" ctype="DOLineData *">
        $$ = object_odata_new(quark_get_amem($P), DO_LINE);
    </element-type>
    <element-type name="do_box_data" ctype="DOBoxData *">
        $$ = object_odata_new(quark_get_amem($P), DO_BOX);
    </element-type>
    <element-type name="do_arc_data" ctype="DOArcData *">
        $$ = object_odata_new(quark_get_amem($P), DO_ARC);
    </element-type>
    <element-type name="textframe" ctype="TextFrame *">
        $$ = textframe_new();
    </element-type>
    <element-type name="textpointer" ctype="TextPointer *">
        $$ = textpointer_new();
    </element-type>
    <element-type name="arrow" ctype="Arrow *">
        $$ = arrow_new();
    </element-type>
    <element-type name="set" ctype="Quark *">
        $$ = set_new($P);
    </element-type>
    <element-type name="symbol" ctype="Symbol *">
        $$ = symbol_new();
    </element-type>
    <element-type name="setline" ctype="SetLine *">
        $$ = setline_new();
    </element-type>
    <element-type name="annotation" ctype="AValue *">
        $$ = avalue_new();
    </element-type>
    <element-type name="errorbar" ctype="Errbar *">
        $$ = xmalloc(sizeof(Errbar));
        memset($$, 0, sizeof(Errbar));
    </element-type>
    <element-type name="barline" ctype="BarLine *">
        $$ = barline_new();
    </element-type>
    <element-type name="riserline" ctype="RiserLine *">
        $$ = riserline_new();
    </element-type>
    <element-type name="dataset" ctype="Dataset *">
        $$ = dataset_new(quark_get_amem($P));
    </element-type>
    <element-type name="wpoint" ctype="WPoint *">
        $$ = xmalloc(sizeof(WPoint));
        memset($$, 0, sizeof(WPoint));
    </element-type>
    <element-type name="region" ctype="Quark *">
        $$ = region_new($P);
    </element-type>
    <element-type name="hotlink" ctype="ss_hotlink *"><![CDATA[
        {
        $$ = xmalloc(sizeof(ss_hotlink));
        memset($$, 0, sizeof(ss_hotlink));
        }
    ]]></element-type>
    <element-type name="scolumn" ctype="ss_column *"><![CDATA[
        {
        ParserData *udata = (ParserData *) $U;
        $$ = ssd_add_col($P, FFORMAT_STRING);
        udata->ncol++;
        udata->nrow = -1;
        }
    ]]></element-type>
    <element-type name="dcolumn" ctype="ss_column *"><![CDATA[
        {
        ParserData *udata = (ParserData *) $U;
        $$ = ssd_add_col($P, FFORMAT_NUMBER);
        udata->ncol++;
        udata->nrow = -1;
        }
    ]]></element-type>
    <element-type name="cell" ctype="char **"><![CDATA[
        $$ = xmalloc(SIZEOF_VOID_P);
        ((ParserData *) $U)->nrow++;
    ]]></element-type>


    <!-- Now describe the document structure -->
    <element name="#EStrGrace" type="project">
        <!-- Attributes -->
        <attribute name="#AStrVersion" type="ival" required="true">
            project_set_version_id($$, $?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrDescription" minOccurs="1" maxOccurs="1">
            project_set_description($$, *$?);
            xfree(*$?);
            xfree($?);
        </child>
        <child name="#EStrDefinitions" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrPage" minOccurs="1" maxOccurs="1">
            Project *pr  = project_get_data($$);
            pr->page_wpp = $?->width;
            pr->page_hpp = $?->height,
            pr->bgfill   = $?->bgfill;
            pr->bgcolor  = $?->bgcolor;
            xfree($?);
        </child>
        <child name="#EStrDataFormats" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrFrame" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrObject" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrAText" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrDefinitions" type="dummy">
        <!-- Child elements -->
        <child name="#EStrColormap" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrFontmap" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrScales" minOccurs="1" maxOccurs="1"/>
    </element>
    <element name="#EStrColormap" type="dummy">
        <!-- Child elements -->
        <child name="#EStrColorDef" minOccurs="2" maxOccurs="unbounded">
            project_add_color($0, $?);
            colordef_free($?);
        </child>
    </element>
    <element name="#EStrFontmap" type="dummy">
        <!-- Child elements -->
        <child name="#EStrFontDef" minOccurs="1" maxOccurs="unbounded">
            project_add_font($0, $?);
            fontdef_free($?);
        </child>
    </element>
    <element name="#EStrScales" type="dummy">
        <!-- Attributes -->
        <attribute name="#AStrFontSize" type="dval">
            project_set_fontsize_scale($0, $?);
        </attribute>
        <attribute name="#AStrLineWidth" type="dval">
            project_set_linewidth_scale($0, $?);
        </attribute>
    </element>
    <element name="#EStrColorDef" type="colordef">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            $$->id = $?;
        </attribute>
        <attribute name="#AStrRgb" type="rgb">
            $$->rgb = *($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrName" type="sval">
            $$->cname = $?;
        </attribute>
    </element>
    <element name="#EStrFontDef" type="fontdef">
        <!-- Attributes -->
        <attribute name="#AStrId" type="ival">
            $$->id = $?;
        </attribute>
        <attribute name="#AStrName" type="sval">
            $$->fontname = $?;
        </attribute>
        <attribute name="#AStrFallback" type="sval">
            $$->fallback = $?;
        </attribute>
    </element>
    <element name="#EStrPage" type="page">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="ival">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="ival">
            $$->height = $?;
        </attribute>
        <attribute name="#AStrColorId" type="ival">
            $$->bgcolor = $?;
        </attribute>
        <attribute name="#AStrFill" type="bval">
            $$->bgfill = $?;
        </attribute>
    </element>
    <element name="#EStrDescription" type="string">
        <!-- Child elements -->
        <child name="#EStrText" minOccurs="1" maxOccurs="1">
            *$$ = *$?;
            xfree($?);
        </child>
    </element>
    <element name="#EStrDataFormats" type="dummy">
        <!-- Child elements -->
        <child name="#EStrWorld" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrDates" minOccurs="1" maxOccurs="1"/>
    </element>
    <element name="#EStrFaceSpec" type="facespec">
        <!-- Attributes -->
        <attribute name="#AStrFontId" type="fontid">
            $$->font = $?;
        </attribute>
        <attribute name="#AStrColorId" type="ival">
            $$->color = $?;
        </attribute>
        <attribute name="#AStrCharSize" type="dval">
            $$->size = $?;
        </attribute>
    </element>
    <element name="#EStrDates" type="dummy">
        <!-- Attributes -->
        <attribute name="#AStrReference" type="ival">
            project_set_ref_date($0, $?);
        </attribute>
        <attribute name="#AStrWrap" type="bval">
            project_allow_two_digits_years($0, $?);
        </attribute>
        <attribute name="#AStrWrapYear" type="ival">
            project_set_wrap_year($0, $?);
        </attribute>
    </element>
    <element name="#EStrWorld" type="dummy">
        <!-- Attributes -->
        <attribute name="#AStrPrec" type="ival">
            project_set_prec($0, $?);
        </attribute>
    </element>
    <element name="#EStrText" type="string">
        <!-- Character data -->
        <data>
            *$$ = utf2iso($?);
        </data>
    </element>
    <element name="#EStrFillSpec" type="pen">
        <!-- Attributes -->
        <attribute name="#AStrColorId" type="ival">
            $$->color = $?;
        </attribute>
        <attribute name="#AStrPatternId" type="ival">
            $$->pattern = $?;
        </attribute>
    </element>
    <element name="#EStrFrame" type="frame">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            frame_set_type($$, get_frame_type_by_name(grace, $?));
            xfree($?);
        </attribute>
        <!-- Child elements -->
        <child name="#EStrViewport" minOccurs="1" maxOccurs="1">
            frame_set_view($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            frame_set_outline($$, $?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            frame_set_fillpen($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLegend" minOccurs="1" maxOccurs="1"/>
        <child name="#EStrGraph" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrObject" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrAText" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrGraph" type="graph">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrPresentationSpec" minOccurs="1" maxOccurs="1">
            graph_set_type($$, $?->type);
            graph_set_bargap($$, $?->bargap);
            graph_set_stacked($$, $?->stacked);
            presentationspec_free($?);
        </child>
        <child name="#EStrXscale" minOccurs="1" maxOccurs="1"><![CDATA[
            world w;
            graph_get_world($$, &w);
            w.xg1 = $?->min;
            w.xg2 = $?->max;
            graph_set_world($$, &w);
            graph_set_xscale($$, $?->type);
            graph_set_xinvert($$, $?->invert);
            xfree($?);
        ]]></child>
        <child name="#EStrYscale" minOccurs="1" maxOccurs="1"><![CDATA[
            world w;
            graph_get_world($$, &w);
            w.yg1 = $?->min;
            w.yg2 = $?->max;
            graph_set_world($$, &w);
            graph_set_yscale($$, $?->type);
            graph_set_yinvert($$, $?->invert);
            xfree($?);
        ]]></child>
        <child name="#EStrZscale" minOccurs="1" maxOccurs="1">
            graph_set_znorm($$, *($?));
            xfree($?);
        </child>
        <child name="#EStrLocator" minOccurs="1" maxOccurs="1">
            graph_set_locator($$, $?);
            glocator_free($?);
        </child>
        <child name="#EStrSSD" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrAGrid" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrObject" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrAText" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrRegion" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrPresentationSpec" type="presentationspec">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = graph_get_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrStacked" type="bval">
            $$->stacked = $?;
        </attribute>
        <attribute name="#AStrBargap" type="dval">
            $$->bargap = $?;
        </attribute>
    </element>
    <element name="#EStrViewport" type="view">
        <!-- Attributes -->
        <attribute name="#AStrXmin" type="dval">
            $$->xv1 = $?;
        </attribute>
        <attribute name="#AStrYmin" type="dval">
            $$->yv1 = $?;
        </attribute>
        <attribute name="#AStrXmax" type="dval">
            $$->xv2 = $?;
        </attribute>
        <attribute name="#AStrYmax" type="dval">
            $$->yv2 = $?;
        </attribute>
    </element>
    <element name="#EStrXscale" type="scale">
        <!-- Attributes -->
        <attribute name="#AStrMin" type="dateordval">
            $$->min = $?;
        </attribute>
        <attribute name="#AStrMax" type="dateordval">
            $$->max = $?;
        </attribute>
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_scale_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
    </element>
    <element name="#EStrYscale" type="scale">
        <!-- Attributes -->
        <attribute name="#AStrMin" type="dateordval">
            $$->min = $?;
        </attribute>
        <attribute name="#AStrMax" type="dateordval">
            $$->max = $?;
        </attribute>
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_scale_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
    </element>
    <element name="#EStrZscale" type="dptr">
        <!-- Attributes -->
        <attribute name="#AStrNorm" type="dval">
            *($$) = $?;
        </attribute>
    </element>
    <element name="#EStrLegend" type="legend">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrLength" type="dval">
            $$->len = $?;
        </attribute>
        <attribute name="#AStrVgap" type="dval">
            $$->vgap = $?;
        </attribute>
        <attribute name="#AStrHgap" type="dval">
            $$->hgap = $?;
        </attribute>
        <attribute name="#AStrInvert" type="bval">
            $$->invert = $?;
        </attribute>
        <attribute name="#AStrSingleSymbol" type="bval">
            $$->singlesym = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrFaceSpec" minOccurs="1" maxOccurs="1">
            $$->font     = $?->font;
            $$->color    = $?->color;
            $$->charsize = $?->size;
            facespec_free($?);
        </child>
        <child name="#EStrLegframe" minOccurs="1" maxOccurs="1">
            $$->boxfillpen = $?->fillpen;
            $$->boxline    = $?->line;
            $$->anchor     = $?->anchor;
            $$->just       = $?->just;
            $$->offset     = $?->offset;
            xfree($?);
        </child>
    </element>
    <element name="#EStrLegframe" type="legframe">
        <attribute name="#AStrAnchor" type="fpoint">
            $$->anchor = *($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrHJust" type="sval">
            int hjust = JUST_LEFT;
            if (!strcmp($?, VStrLeft)) {
                hjust = JUST_LEFT;
            } else
            if (!strcmp($?, VStrRight)) {
                hjust = JUST_RIGHT;
            } else
            if (!strcmp($?, VStrCenter)) {
                hjust = JUST_CENTER;
            }
            $$->just |= hjust;
            xfree($?);
        </attribute>
        <attribute name="#AStrVJust" type="sval">
            int vjust = JUST_BOTTOM;
            if (!strcmp($?, VStrBottom)) {
                vjust = JUST_BOTTOM;
            } else
            if (!strcmp($?, VStrTop)) {
                vjust = JUST_TOP;
            } else
            if (!strcmp($?, VStrMiddle)) {
                vjust = JUST_MIDDLE;
            } else
            if (!strcmp($?, VStrBaseline)) {
                vjust = JUST_BLINE;
            }
            $$->just |= vjust;
            xfree($?);
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            $$->offset = *($?);
            xfree($?);
        </attribute>
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLineSpec" type="line">
        <!-- Attributes -->
        <attribute name="#AStrColorId" type="ival">
            $$->pen.color = $?;
        </attribute>
        <attribute name="#AStrPatternId" type="ival">
            $$->pen.pattern = $?;
        </attribute>
        <attribute name="#AStrStyleId" type="ival">
            $$->style = $?;
        </attribute>
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
    </element>
    <element name="#EStrLocator" type="glocator">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_glocator_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <!-- Child elements -->
        <child name="#EStrFixedpoint" minOccurs="1" maxOccurs="1">
            $$->pointset = $?->active;
            $$->origin.x = $?->x;
            $$->origin.y = $?->y;
            xfree($?);
        </child>
        <child name="#EStrXformat" minOccurs="1" maxOccurs="1">
            $$->fx = *$?;
            /* $?->fstring will be free'd by glocator_free() */
            xfree($?);
        </child>
        <child name="#EStrYformat" minOccurs="1" maxOccurs="1">
            $$->fy = *$?;
            /* $?->fstring will be free'd by glocator_free() */
            xfree($?);
        </child>
    </element>
    <element name="#EStrFixedpoint" type="fixedpoint">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrX" type="dval">
            $$->x = $?;
        </attribute>
        <attribute name="#AStrY" type="dval">
            $$->y = $?;
        </attribute>
    </element>
    <element name="#EStrXformat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
        <attribute name="#AStrFormatString" type="sval">
            $$->fstring = $?;
        </attribute>
    </element>
    <element name="#EStrYformat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
        <attribute name="#AStrFormatString" type="sval">
            $$->fstring = $?;
        </attribute>
    </element>
    <element name="#EStrAGrid" type="axisgrid">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrType" type="sval">
            int axis_type;
            if (!strcmp($?, "x")) {
                axis_type = AXIS_TYPE_X;
            } else {
                axis_type = AXIS_TYPE_Y;
            }
            axisgrid_set_type($$, axis_type);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrMajorStep" type="dval">
            tickmarks *t = axisgrid_get_data($$);
            t->tmajor = $?;
        </attribute>
        <attribute name="#AStrMinorDivisions" type="ival">
            tickmarks *t = axisgrid_get_data($$);
            t->nminor = $?;
        </attribute>
        <attribute name="#AStrAutoTicking" type="ival">
            tickmarks *t = axisgrid_get_data($$);
            t->t_autonum = $?;
        </attribute>
        <attribute name="#AStrRoundedPosition" type="bval">
            tickmarks *t = axisgrid_get_data($$);
            t->t_round = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrMajorGridlines" minOccurs="1" maxOccurs="1">
            tickmarks *t = axisgrid_get_data($$);
            if (t) {
                t->gprops = *($?);
            }
            xfree($?);
        </child>
        <child name="#EStrMinorGridlines" minOccurs="1" maxOccurs="1">
            tickmarks *t = axisgrid_get_data($$);
            if (t) {
                t->mgprops = *($?);
            }
            xfree($?);
        </child>
        <child name="#EStrUserticks" minOccurs="1" maxOccurs="1"><![CDATA[
            AMem *amem = quark_get_amem($$);
            tickmarks *t = axisgrid_get_data($$);
            t->t_spec    = $?->type;
            if (t->t_spec != TICKS_SPEC_NONE) {
                int i;
                t->nticks = $?->nticks;
                for (i = 0; i < t->nticks; i++) {
                    t->tloc[i] = $?->tloc[i];
                    t->tloc[i].label = amem_strdup(amem, $?->tloc[i].label);
                    xfree($?->tloc[i].label);
                }
            }
            xfree($?);
        ]]></child>
        <child name="#EStrAxisbar" minOccurs="1" maxOccurs="1">
            tickmarks *t = axisgrid_get_data($$);
            if (t) {
                t->bar = $?->line;
            }
            xfree($?);
        </child>
        <child name="#EStrMajorTickmarks" minOccurs="1" maxOccurs="1">
            tickmarks *t = axisgrid_get_data($$);
            t->props = *($?);
            xfree($?);
        </child>
        <child name="#EStrMinorTickmarks" minOccurs="1" maxOccurs="1">
            tickmarks *t = axisgrid_get_data($$);
            t->mprops = *($?);
            xfree($?);
        </child>
        <child name="#EStrTicklabels" minOccurs="1" maxOccurs="1">
            AMem *amem = quark_get_amem($$);
            tickmarks *t = axisgrid_get_data($$);
            t->tl_formula        = amem_strdup(amem, $?->transform);
            t->tl_tprops         = $?->tprops;
            t->tl_skip           = $?->skip;
            t->tl_staggered      = $?->stagger;
            t->tl_format         = $?->format;
            t->tl_format.fstring = amem_strdup(amem, $?->format.fstring);
            t->tl_gap.x          = $?->offset.x;
            t->tl_gap.y          = $?->offset.y;
            t->tl_starttype      = $?->autostart ? TYPE_AUTO:TYPE_SPEC;
            t->tl_start          = $?->start;
            t->tl_stoptype       = $?->autostop ? TYPE_AUTO:TYPE_SPEC;
            t->tl_stop           = $?->stop;
            t->tl_prestr         = amem_strdup(amem, $?->prepend);
            t->tl_appstr         = amem_strdup(amem, $?->append);
            tlabels_free($?);
        </child>
        <child name="#EStrAxis" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrMajorGridlines" type="gridprops">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->onoff = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrMinorGridlines" type="gridprops">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->onoff = $?;
        </attribute>
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrAxisbar" type="axisbar">
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrUserticks" type="uticks">
        <!-- Attributes -->
        <attribute name="#AStrType" type="uticktype">
            $$->type = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrTick" minOccurs="0" maxOccurs="unbounded">
            utick_add($$, $?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrMajorTickmarks" type="tickprops">
        <!-- Attributes -->
        <attribute name="#AStrInoutPlacement" type="inoutplacement">
            $$->inout = $?;
        </attribute>
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *$?;
            xfree($?);
        </child>
    </element>
    <element name="#EStrMinorTickmarks" type="tickprops">
        <!-- Attributes -->
        <attribute name="#AStrInoutPlacement" type="inoutplacement">
            $$->inout = $?;
        </attribute>
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *$?;
            xfree($?);
        </child>
    </element>
    <element name="#EStrTicklabels" type="tlabels">
        <!-- Attributes -->
        <attribute name="#AStrTransform" type="sval">
            $$->transform = $?;
        </attribute>
        <attribute name="#AStrPrepend" type="sval">
            $$->prepend = $?;
        </attribute>
        <attribute name="#AStrAppend" type="sval">
            $$->append = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            $$->offset = *($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrSkip" type="ival">
            $$->skip = $?;
        </attribute>
        <attribute name="#AStrStagger" type="ival">
            $$->stagger = $?;
        </attribute>
        <attribute name="#AStrStart" type="autodateordval">
            $$->autostart = $?->autov;
            $$->start     = $?->value;
            xfree($?);
        </attribute>
        <attribute name="#AStrStop" type="autodateordval">
            $$->autostop = $?->autov;
            $$->stop     = $?->value;
            xfree($?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrTextProperties" minOccurs="1" maxOccurs="1">
            $$->tprops = *($?);
            xfree($?);
        </child>
        <child name="#EStrFormat" minOccurs="1" maxOccurs="1">
            $$->format = *($?);
            /* $?->fstring will be free'd by avalue_free() */
            xfree($?);
        </child>
    </element>
    <element name="#EStrTick" type="tick">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ticktype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPosition" type="dateordval">
            $$->wtpos = $?;
        </attribute>
        <attribute name="#AStrLabel" type="sval">
            $$->label = $?;
        </attribute>
    </element>
    <element name="#EStrAxis" type="axis">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>

        <attribute name="#AStrPosition" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            axis_set_position($$, get_axis_position_by_name(grace, $?));
            xfree($?);
        </attribute>

        <attribute name="#AStrOffset" type="dval">
            axis_set_offset($$, $?);
        </attribute>
        <attribute name="#AStrBar" type="bval">
            axis_enable_bar($$, $?);
        </attribute>
        <attribute name="#AStrTicks" type="bval">
            axis_enable_ticks($$, $?);
        </attribute>
        <attribute name="#AStrLabels" type="bval">
            axis_enable_labels($$, $?);
        </attribute>
        <!-- Child elements -->
        <child name="#EStrAText" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrObject" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrFormat" type="format">
        <!-- Attributes -->
        <attribute name="#AStrType" type="ftype">
            $$->type = $?;
        </attribute>
        <attribute name="#AStrPrec" type="ival">
            $$->prec = $?;
        </attribute>
        <attribute name="#AStrFormatString" type="sval">
            $$->fstring = $?;
        </attribute>
    </element>
    <element name="#EStrObject" type="object">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrAngle" type="dval">
            object_set_angle($$, $?);
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            object_set_offset($$, $?);
            xfree($?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            object_set_line($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLocation" minOccurs="1" maxOccurs="1"><![CDATA[
            object_set_location($$, &($?->ap));
            xfree($?);
        ]]></child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            object_set_fillpen($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLineData" minOccurs="0" maxOccurs="1">
            DObject *o = object_get_data($$);
            if (o) {
                o->odata = $?;
                o->type  = DO_LINE;
            }
        </child>
        <child name="#EStrBoxData" minOccurs="0" maxOccurs="1">
            DObject *o = object_get_data($$);
            if (o) {
                o->odata = $?;
                o->type  = DO_BOX;
            }
        </child>
        <child name="#EStrArcData" minOccurs="0" maxOccurs="1">
            DObject *o = object_get_data($$);
            if (o) {
                o->odata = $?;
                o->type  = DO_ARC;
            }
        </child>
    </element>
    <element name="#EStrLocation" type="location">
        <!-- Attributes -->
        <attribute name="#AStrX" type="dateordval">
            $$->ap.x = $?;
        </attribute>
        <attribute name="#AStrY" type="dateordval">
            $$->ap.y = $?;
        </attribute>
    </element>
    <element name="#EStrBoxData" type="do_box_data">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="dval">
            $$->height = $?;
        </attribute>
    </element>
    <element name="#EStrArcData" type="do_arc_data">
        <!-- Attributes -->
        <attribute name="#AStrWidth" type="dval">
            $$->width = $?;
        </attribute>
        <attribute name="#AStrHeight" type="dval">
            $$->height = $?;
        </attribute>
        <attribute name="#AStrStartAngle" type="dval">
            $$->angle1 = $?;
        </attribute>
        <attribute name="#AStrExtentAngle" type="dval">
            $$->angle2 = $?;
        </attribute>
        <attribute name="#AStrClosureType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->closure_type = get_arcclosure_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrDrawClosure" type="bval">
            $$->draw_closure = $?;
        </attribute>
    </element>
    <element name="#EStrLineData" type="do_line_data">
        <!-- Attributes -->
        <attribute name="#AStrX" type="dval">
            $$->vector.x = $?;
        </attribute>
        <attribute name="#AStrY" type="dval">
            $$->vector.y = $?;
        </attribute>
        <attribute name="#AStrArrowsAt" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->arrow_end = get_arrow_placement_by_name(grace, $?);
            xfree($?);
        </attribute>

        <!-- Child elements -->
        <child name="#EStrArrow" minOccurs="1" maxOccurs="1">
            $$->arrow = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrAText" type="atext">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            atext_set_offset($$, $?);
            xfree($?);
        </attribute>
    
        <!-- Child elements -->
        <child name="#EStrLocation" minOccurs="1" maxOccurs="1"><![CDATA[
            atext_set_ap($$, &($?->ap));
            xfree($?);
        ]]></child>
        <child name="#EStrTextProperties" minOccurs="1" maxOccurs="1">
            atext_set_tprops($$, $?);
            xfree($?);
        </child>
        <child name="#EStrText" minOccurs="1" maxOccurs="1">
            atext_set_string($$, *$?);
            xfree(*$?);
            xfree($?);
        </child>
        <child name="#EStrTextFrame" minOccurs="1" maxOccurs="1"><![CDATA[
            AText *at = atext_get_data($$);
            if (at) {
                at->frame = *$?;
            }
            xfree($?);
        ]]></child>
        <child name="#EStrPointer" minOccurs="1" maxOccurs="1"><![CDATA[
            AText *at = atext_get_data($$);
            if (at) {
                at->arrow_flag = $?->active;
                at->arrow      = $?->arrow;
            }
            xfree($?);
        ]]></child>
    </element>
    <element name="#EStrTextFrame" type="textframe">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->decor = get_framedecor_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrOffset" type="dval">
            $$->offset = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrPointer" type="textpointer">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrArrow" minOccurs="1" maxOccurs="1">
            $$->arrow = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrArrow" type="arrow">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_arrow_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrLength" type="dval">
            $$->length = $?;
        </attribute>
        <attribute name="#AStrDlFf" type="dval">
            $$->dL_ff = $?;
        </attribute>
        <attribute name="#AStrLlFf" type="dval">
            $$->lL_ff = $?;
        </attribute>
    </element>
    <element name="#EStrSSD" type="ssd">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrRows" type="ival">
            ssd_set_nrows($$, $?);
        </attribute>
        <attribute name="#AStrIndexed" type="bval">
            ssd_set_indexed($$, $?);
        </attribute>
        <!-- Child elements -->
        <child name="#EStrHotlink" minOccurs="0" maxOccurs="1"><![CDATA[
            ssd_set_hotlink($$, $?);
            xfree($?->src);
            xfree($?);
        ]]></child>
        <child name="#EStrDcolumn" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrScolumn" minOccurs="0" maxOccurs="unbounded"/>
        <child name="#EStrSet" minOccurs="0" maxOccurs="unbounded"/>
    </element>
    <element name="#EStrHotlink" type="hotlink">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrPipe" type="bval">
            $$->is_pipe = $?;
        </attribute>
        <attribute name="#AStrSrc" type="sval"><![CDATA[
            $$->src = $?;
        ]]></attribute>
    </element>
    <element name="#EStrScolumn" type="scolumn">
        <!-- Attributes -->
        <attribute name="#AStrLabel" type="sval"><![CDATA[
            ParserData *udata = (ParserData *) $U;
            $$->label = amem_strdup(quark_get_amem(udata->ss), $?);
            xfree($?);
        ]]></attribute>
        <!-- Child elements -->
        <child name="#EStrCell" minOccurs="0" maxOccurs="unbounded"><![CDATA[
            ParserData *udata = (ParserData *) $U;
            ssd_set_string(udata->ss, udata->nrow, udata->ncol, *$?);
            xfree(*$?);
            xfree($?);
        ]]></child>
    </element>
    <element name="#EStrDcolumn" type="dcolumn">
        <!-- Attributes -->
        <attribute name="#AStrLabel" type="sval"><![CDATA[
            ParserData *udata = (ParserData *) $U;
            $$->label = amem_strdup(quark_get_amem(udata->ss), $?);
            xfree($?);
        ]]></attribute>
        <!-- Child elements -->
        <child name="#EStrCell" minOccurs="0" maxOccurs="unbounded"><![CDATA[
            ParserData *udata = (ParserData *) $U;
            double val;
            if (parse_date_or_number($0, *$?, FALSE, FMT_iso, &val) != RETURN_SUCCESS) {
                val = 0;
            }
            ssd_set_value(udata->ss, udata->nrow, udata->ncol, val);
            xfree(*$?);
            xfree($?);
        ]]></child>
    </element>
    <element name="#EStrCell" type="cell">
        <!-- Character data -->
        <data>
            *$$ = utf2iso($?);
        </data>
    </element>
    <element name="#EStrSet" type="set">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrType" type="settype">
            set_set_type($$, $?);
        </attribute>
        <attribute name="#AStrSkip" type="ival">
            set_set_symskip($$, $?);
        </attribute>
        <attribute name="#AStrSkipMinDist" type="dval">
            set_set_symskipmindist($$, $?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrDataset" minOccurs="1" maxOccurs="1">
            set_set_dataset($$, $?);
            dataset_free(quark_get_amem($$), $?);
        </child>
        <child name="#EStrSymbol" minOccurs="1" maxOccurs="1">
            set_set_symbol($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLine" minOccurs="1" maxOccurs="1">
            set_set_line($$, $?);
            xfree($?);
        </child>
        <child name="#EStrAnnotation" minOccurs="1" maxOccurs="1">
            set_set_avalue($$, $?);
            avalue_free($?);
        </child>
        <child name="#EStrErrorbar" minOccurs="1" maxOccurs="1">
            set_set_errbar($$, $?);
            xfree($?);
        </child>
        <child name="#EStrLegendEntry" minOccurs="1" maxOccurs="1">
            set_set_legstr($$, *$?);
            xfree(*$?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrSymbol" type="symbol">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_sym_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>
        <attribute name="#AStrChar" type="ival">
            $$->symchar = $?;
        </attribute>
        <attribute name="#AStrFontId" type="fontid">
            $$->charfont = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLine" type="setline">
        <!-- Attributes -->
        <attribute name="#AStrType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->type = get_line_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrFillType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->filltype = get_setfill_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrFillRule" type="fillrule">
            $$->fillrule = $?;
        </attribute>
        <attribute name="#AStrBaselineType" type="sval">
            Grace *grace = ((ParserData *)$U)->grace;
            $$->baseline_type = get_baseline_type_by_name(grace, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrDrawBaseline" type="bval">
            $$->baseline = $?;
        </attribute>
        <attribute name="#AStrDrawDroplines" type="bval">
            $$->droplines = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
        <child name="#EStrFillSpec" minOccurs="1" maxOccurs="1">
            $$->fillpen = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrAnnotation" type="annotation">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>
        <attribute name="#AStrOffset" type="offset">
            $$->offset = *($?);
            xfree($?);
        </attribute>
        <attribute name="#AStrPrepend" type="sval">
            $$->prestr = $?;
        </attribute>
        <attribute name="#AStrAppend" type="sval">
            $$->appstr = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrTextProperties" minOccurs="1" maxOccurs="1">
            $$->tprops = *$?;
            xfree($?);
        </child>
        <child name="#EStrFormat" minOccurs="1" maxOccurs="1">
            $$->format = *$?;
            /* $?->fstring will be free'd by avalue_free() */
            xfree($?);
        </child>
        <child name="#EStrTextFrame" minOccurs="1" maxOccurs="1">
            $$->frame = *$?;
            xfree($?);
        </child>
    </element>
    <element name="#EStrTextProperties" type="textprops">
        <!-- Attributes -->
        <attribute name="#AStrAngle" type="dval">
            $$->angle = $?;
        </attribute>
        <attribute name="#AStrHJust" type="sval">
            int hjust = JUST_LEFT;
            if (!strcmp($?, VStrLeft)) {
                hjust = JUST_LEFT;
            } else
            if (!strcmp($?, VStrRight)) {
                hjust = JUST_RIGHT;
            } else
            if (!strcmp($?, VStrCenter)) {
                hjust = JUST_CENTER;
            }
            $$->just |= hjust;
            xfree($?);
        </attribute>
        <attribute name="#AStrVJust" type="sval">
            int vjust = JUST_BOTTOM;
            if (!strcmp($?, VStrBottom)) {
                vjust = JUST_BOTTOM;
            } else
            if (!strcmp($?, VStrTop)) {
                vjust = JUST_TOP;
            } else
            if (!strcmp($?, VStrMiddle)) {
                vjust = JUST_MIDDLE;
            } else
            if (!strcmp($?, VStrBaseline)) {
                vjust = JUST_BLINE;
            }
            $$->just |= vjust;
            xfree($?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrFaceSpec" minOccurs="1" maxOccurs="1">
            $$->charsize  = $?->size;
            $$->font      = $?->font;
            $$->color     = $?->color;
            xfree($?);
        </child>
    </element>
    <element name="#EStrErrorbar" type="errorbar">
        <!-- Attributes -->
        <attribute name="#AStrActive" type="bval">
            $$->active = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrBarline" minOccurs="1" maxOccurs="1">
            $$->barsize = $?->size;
            $$->pen     = $?->line.pen;
            $$->linew   = $?->line.width;
            $$->lines   = $?->line.style;
            xfree($?);
        </child>
        <!-- Child elements -->
        <child name="#EStrRiserline" minOccurs="1" maxOccurs="1">
            $$->arrow_clip  = $?->arrow_clip;
            $$->cliplen     = $?->clip_length;
            $$->riser_linew = $?->line.width;
            $$->riser_lines = $?->line.style;
            xfree($?);
        </child>
    </element>
    <element name="#EStrBarline" type="barline">
        <!-- Attributes -->
        <attribute name="#AStrSize" type="dval">
            $$->size = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrRiserline" type="riserline">
        <!-- Attributes -->
        <attribute name="#AStrArrowClip" type="bval">
            $$->arrow_clip = $?;
        </attribute>
        <attribute name="#AStrClipLength" type="dval">
            $$->clip_length = $?;
        </attribute>

        <!-- Child elements -->
        <child name="#EStrLineSpec" minOccurs="1" maxOccurs="1">
            $$->line = *($?);
            xfree($?);
        </child>
    </element>
    <element name="#EStrLegendEntry" type="string">
        <!-- Child elements -->
        <child name="#EStrText" minOccurs="1" maxOccurs="1">
            *$$ = *$?;
            xfree($?);
        </child>
    </element>
    <element name="#EStrDataset" type="dataset">
        <!-- Attributes -->
        <attribute name="x" type="ival">
            $$->cols[DATA_X] = $?;
        </attribute>
        <attribute name="y" type="ival">
            $$->cols[DATA_Y] = $?;
        </attribute>
        <attribute name="y1" type="ival">
            $$->cols[DATA_Y1] = $?;
        </attribute>
        <attribute name="y2" type="ival">
            $$->cols[DATA_Y2] = $?;
        </attribute>
        <attribute name="y3" type="ival">
            $$->cols[DATA_Y3] = $?;
        </attribute>
        <attribute name="y4" type="ival">
            $$->cols[DATA_Y4] = $?;
        </attribute>
        <attribute name="s" type="ival">
            $$->acol = $?;
        </attribute>
    </element>
    <element name="#EStrRow" type="wpoint">
        <!-- Attributes -->
        <attribute name="x" type="dateordval">
            $$->x = $?;
        </attribute>
        <attribute name="y" type="dateordval">
            $$->y = $?;
        </attribute>
    </element>
    <element name="#EStrRegion" type="region">
        <!-- Attributes -->
        <attribute name="#AStrId" type="sval">
            quark_idstr_set($$, $?);
            xfree($?);
        </attribute>
        <attribute name="#AStrActive" type="bval">
            quark_set_active($$, $?);
        </attribute>
        <attribute name="#AStrType" type="regiontype">
            region_set_type($$, $?);
        </attribute>
        <attribute name="#AStrColorId" type="ival">
            region_set_color($$, $?);
        </attribute>
        
        <!-- Child elements -->
        <child name="#EStrRow" minOccurs="2" maxOccurs="unbounded">
            region_add_point($$, $?);
            xfree($?);
        </child>
    </element>

    <!-- Postamble -->
    <postamble><![CDATA[

static int exception_handler(int ierrno,
    const char *entity, const char *context, void *udata)
{
    int handled = 0;
    
    switch (ierrno) {
    case XCC_ECNTX:
        xcc_error("unexpected \"%s\" in the context of \"%s\"", entity, context ? context:"xml");
        break;
    case XCC_EATTR:
        handled = 1;
        xcc_error("unknown attribute \"%s\" of element \"%s\"", entity, context);
        break;
    case XCC_EELEM:
        xcc_error("unknown element \"%s\" appeared in context of \"%s\"", entity, context);
        break;
    case XCC_EEMIN:
        xcc_error("underrun of occurrences of \"%s\" in the context of \"%s\"", entity, context);
        break;
    case XCC_EEMAX:
        xcc_error("overrun of occurrences of \"%s\" in the context of \"%s\"", entity, context);
        break;
    case XCC_EAREQ:
        xcc_error("required attribute \"%s\" of element \"%s\" is missing", entity, context);
        break;
    case XCC_EINTR:
        xcc_error("internal error");
        break;
    }
    
    return handled;
}

GProject *gproject_load(Grace *grace, GrFILE *grf, int mmodel)
{
    ParserData udata;
    void *dummy;
    int ret;

    udata.grace  = grace;
    udata.ss     = NULL;
    udata.nrow   = -1;
    udata.ncol   = -1;
    udata.gp     = gproject_new(grace, mmodel);
    
    if (!udata.gp) {
        return NULL;
    }
    
    udata.gp->grf = grfile_new(grf->fname);

    ret = xgr_parse(grf->fp, &dummy, &udata, exception_handler);

    if (ret == XCC_RETURN_SUCCESS) {
        Quark *pr = udata.gp->q;
        time_t mtime = grfile_get_mtime(grf);

        project_update_timestamp(pr, mtime);

        /* Clear dirtystate */
        quark_dirtystate_set(pr, FALSE);
        
        return udata.gp;
    } else {
        gproject_free(udata.gp);
        
        return NULL;
    }
}
    ]]></postamble>
</parser>
